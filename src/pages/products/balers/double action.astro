---

import Layout from "../../../layouts/Layout.astro";
import { Image } from "astro:assets";
import SecondaryNav from "../../../components/SecondaryNav.astro";
import Product from "../../../components/Product.astro";

import productData from "../../../products.json";
import ContactsForm from "../../../components/ContactsForm.astro";
import Table from "../../../components/Table.astro";

const balerNames = productData.balers.types;

const doubleActionImages = await Astro.glob("../../../images/Products/Double Action Baler/*");
const realPhotos = null;

const description = productData.balers["double_action"].description;
const tableHeaders = productData.balers["double_action"].tableHeaders;
const tableData = productData.balers["double_action"].tableData;
const wasteTableHeaders = null;
const wasteTableData = null;
const cards = productData.balers["double_action"].cards;
const industry = productData.balers["double_action"].industry;
const title = balerNames[10];
const videos = productData.balers["double_action"].videos;
const faq = productData.balers.faq;
const type = "Baler";

---


<Layout title="Double Action Hydraulic Baler: Scrap Metal, and Waste Processing by Jain Hydraulics Recycling" description={productData.balers["double_action"].description} >

    <div class="max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto">
        <!-- Grid -->
        <div class="text-center items-center gap-10">

            <!-- Slider -->
            <div data-hs-carousel='{"loadingClasses": "opacity-0","isAutoPlay": true}' class="relative">
            <div class="hs-carousel relative overflow-hidden w-full min-h-[500px] bg-white rounded-lg">
                <div class="hs-carousel-body absolute top-0 bottom-0 start-0 flex flex-nowrap transition-transform duration-700 opacity-0">
                    <div class="hs-carousel-slide">
                        <div class="grid grid-rows-12 h-full p-6 gap-2 overflow-hidden">
                            <div class="row-span-10 rounded-xl mx-auto max-w-fit">
                                <Image class="h-full w-auto object-scale-down mx-auto" src={doubleActionImages[0].default} alt={title} />
                            </div>
                            <span class="font-bold uppercase row-span-2 text-2xl transition duration-700">Front Door</span>
                        </div>
                    </div>
                    <div class="hs-carousel-slide">
                        <div class="grid grid-rows-12 h-full p-6 gap-2 overflow-hidden">
                            <div class="row-span-10 rounded-xl mx-auto max-w-fit max-h-fit">
                                <Image class="w-auto h-full mx-auto object-scale-down" src={doubleActionImages[1].default} alt={title} />
                            </div>
                            <span class="font-bold uppercase row-span-2 text-2xl transition duration-700">Sliding Door</span>
                        </div>
                    </div>
                    <div class="hs-carousel-slide">
                        <div class="grid grid-rows-12 h-full p-6 gap-2 overflow-hidden">
                            <div class="row-span-10 rounded-xl mx-auto max-w-fit">
                                <Image class="h-full w-auto object-scale-down mx-auto" src={doubleActionImages[2].default} alt={title} />
                            </div>
                            <span class="font-bold uppercase row-span-2 text-2xl transition duration-700">Top Ejection</span>
                        </div>
                    </div>
                </div>
            </div>


            <div class="hs-carousel-pagination flex justify-center absolute bottom-3 start-0 end-0 space-x-2">
                <span class="hs-carousel-active:bg-blue-700 hs-carousel-active:border-blue-700 w-3 h-3 border border-gray-400 rounded-full cursor-pointer"></span>
                <span class="hs-carousel-active:bg-blue-700 hs-carousel-active:border-blue-700 w-3 h-3 border border-gray-400 rounded-full cursor-pointer"></span>
                <span class="hs-carousel-active:bg-blue-700 hs-carousel-active:border-blue-700 w-3 h-3 border border-gray-400 rounded-full cursor-pointer"></span>
            </div>
            </div>
            <!-- End Slider -->
            
            <!-- End Col -->
            
            <div class="mt-5 sm:mt-10 lg:mt-0">
                <div class="space-y-6 sm:space-y-8">
                    <!-- Title -->
                    <div class="space-y-2 md:space-y-4">
                        <h2 class="font-bold text-3xl lg:text-4xl text-gray-800 dark:text-gray-200">{title + " Baler"}</h2>
                        <span class="block text-xs font-semibold uppercase text-blue-600 dark:text-blue-500">
                            { industry }
                        </span>           
                    </div>
                    <!-- End Title -->
                    
                </div>
            </div>
            <!-- End Col -->
            {/* 
                <div class="grid grid-cols-2 gap-8">
                    {
                        cards ? cards.map(item => (
                        <div class="items-center bg-white border shadow-sm rounded-xl dark:bg-slate-900 dark:border-gray-700 dark:shadow-slate-700/[.7]">
                            <div class="w-full">
                                <h3 class="py-4 border-b-4 text-2xl font-bold text-gray-800 dark:text-white mb-4">
                                    {item.title}
                                </h3>
                            </div>
                            <!-- List -->
                            <ul role="list" class="pb-4 px-4 md:px-7 md:pb-7 space-y-2 sm:space-y-4 grid">
                                {
                                    item["keyPoints"] !== undefined ? item["keyPoints"].map(data => (
                                    <li class="flex">
                                        <span class="mt-0.5 h-5 w-5 flex justify-center items-center rounded-full bg-blue-50 text-blue-600 dark:bg-blue-800/30 dark:text-blue-500">
                                            <svg class="flex-shrink-0 h-3.5 w-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"/></svg>
                                        </span>
                                        
                                        <span class="pl-2 text-left text-sm sm:text-base text-gray-500">
                                            <Fragment set:html={data}/>
                                        </span>
                                    </li>
                                    )) : null
                                }
                            </ul>
                            <!-- End List -->
                        </div>
                        )) : null
                    } 
                    
                </div>
                */}
            </div>
            
            <div class="grid gap-1 mt-2 md:max-w-[50%] mx-auto gap-y-2">
                
                <a class="max-w-fit mx-auto py-3 px-4 inline-flex items-center text-xs font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600" href="#form-quote">
                    Book Now
                    <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>
                </a>
                
            </div>

            <!-- Description -->
            <div class="grid md:grid-cols-5 gap-2 md:gap-10 mt-6 md:mt-14">
                
                <!-- Title -->
                <div class="md:col-span-2">
                    <div class="max-w-xs">
                        <h2 class="text-2xl font-bold md:text-4xl md:leading-tight dark:text-white">Description</h2>
                        <p class="text-sm text-gray-500"></p>
                    </div>
                </div>
                
                <!-- Grid -->
                <div class="md:col-span-3">
                    
                    <div>
                        <p class="text-gray-500 font-serif md:text-xl"> { description }</p>
                    </div>
                    
                </div>
            </div>
            
            <!-- Features -->
            <div class="grid md:grid-cols-5 gap-2 md:gap-10 mt-6 md:mt-14 ">
                
                <!-- Title -->
                <div class="md:col-span-2">
                    <div class="max-w-xs">
                        <h2 class="text-2xl font-bold md:text-4xl md:leading-tight dark:text-white">Features</h2>
                        <p class="text-sm text-gray-500"></p>
                    </div>
                </div>
                
                <!-- Grid -->
                <div class="md:col-span-3">
                    
                    <div class="hs-accordion-group divide-y divide-gray-200 dark:divide-gray-700">
                        {
                            cards ? cards.map((item, index) => (
                                <div class={index === 0 ? "hs-accordion active" : "hs-accordion"}>
                                    <button class="hs-accordion-toggle group pt-3 pb-3 inline-flex items-center justify-between gap-x-3 w-full md:text-xl font-semibold text-start text-gray-800 rounded-lg transition hover:text-gray-500 dark:text-gray-200 dark:hover:text-gray-400 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600">
                                        { item.title }
                                        <svg class="hs-accordion-active:hidden block flex-shrink-0 w-5 h-5 text-gray-600 group-hover:text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 9 6 6 6-6"/></svg>
                                        <svg class="hs-accordion-active:block hidden flex-shrink-0 w-5 h-5 text-gray-600 group-hover:text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m18 15-6-6-6 6"/></svg>
                                    </button>
                                    <div class={index === 0 ? "hs-accordion-content w-full overflow-hidden transition-[height] duration-300" : "hs-accordion-content hidden w-full overflow-hidden transition-[height] duration-300" } >
                                        <ul>                   
                                            {
                                                
                                                item["keyPoints"] !== undefined ? item["keyPoints"].map(data => (
                                                <li class="flex pl-1">
                                                    <span class="mt-0.5 h-5 w-5 flex justify-center items-center rounded-full bg-blue-50 text-blue-600 dark:bg-blue-800/30 dark:text-blue-500">
                                                        <svg class="flex-shrink-0 h-3.5 w-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"/></svg>
                                                    </span>
                                                    
                                                    <p class="pl-2 pb-3 text-left text-sm sm:text-base text-gray-500">
                                                        <Fragment set:html={data}/>
                                                    </p>
                                                </li>
                                                )) : null
                                            }
                                        </ul>
                                    </div>
                                </div>
                            )) : null
                        }
                    </div>
                </div>
            </div>
            
            
            <!-- FAQ-->
            <div class="grid md:grid-cols-5 gap-2 md:gap-10 mt-6 md:mt-14">
                
                <!-- Title -->
                <div class="md:col-span-2">
                    <div class="max-w-xs">
                        <h2 class="text-2xl font-bold md:text-4xl md:leading-tight dark:text-white">Frequently Asked Questions</h2>
                        <p class="text-sm text-gray-500"></p>
                    </div>
                </div>
                
                <!-- Grid -->
                <div class="md:col-span-3">
                    
                    <div class="hs-accordion-group divide-y divide-gray-200 dark:divide-gray-700">
                        {
                            faq ? faq.map((item, index) => (
                            <div class={index === 0 ? "hs-accordion active" : "hs-accordion"} >
                                <button class="hs-accordion-toggle group pt-3 pb-3 inline-flex items-center justify-between gap-x-3 w-full md:text-xl font-semibold text-start text-gray-800 rounded-lg transition hover:text-gray-500 dark:text-gray-200 dark:hover:text-gray-400 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600" >
                                    { item["question"] }
                                    <svg class="hs-accordion-active:hidden block flex-shrink-0 w-5 h-5 text-gray-600 group-hover:text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 9 6 6 6-6"/></svg>
                                    <svg class="hs-accordion-active:block hidden flex-shrink-0 w-5 h-5 text-gray-600 group-hover:text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m18 15-6-6-6 6"/></svg>
                                </button>
                                <div  class={index === 0 ? "hs-accordion-content w-full overflow-hidden transition-[height] duration-300" : "hs-accordion-content hidden w-full overflow-hidden transition-[height] duration-300" } >
                                    <ul>                   
                                        {
                                            
                                            item["answer"] !== undefined ? 
                                            <li>
                                                
                                                <p class="pl-1 pb-3 text-left text-sm sm:text-base text-gray-500">
                                                    <Fragment set:html={item["answer"]}/>
                                                </p>
                                            </li>
                                            : null
                                        }
                                    </ul>
                                </div>
                            </div>
                            )) : null
                        }
                    </div>
                </div>
            </div>
            
            <Table tableData={tableData} tableHeaders={tableHeaders} wasteTableData={wasteTableData} wasteTableHeaders={wasteTableHeaders} />
        </div>
        
        {
            
            realPhotos || videos.length >= 1 ?
            <div class={`grid ${realPhotos && realPhotos.length > 1 || videos.length > 1 ? 'md:grid-cols-2' : 'grid-cols-1'} gap-4 p-8 mx-auto bg-slate-900 items-center md:gap-8 md:p-20 mb-2`}>
                {
                    realPhotos ?
                    realPhotos.map((item) => (
                    <div class="w-full h-full">
                        <Image class="w-auto h-full object-cover mx-auto" src={item.default} alt="machinePhoto" />
                    </div>
                    ))
                    : null
                }
                {
                    videos ?
                    videos.map((item,index) => (
                    
                    <div class="w-full h-full max-w-[1000px] mx-auto overflow-hidden aspect-video pointer-events-auto">
                        <astro-greet data-message={videos} id={`muteYouTubeVideoPlayer${index}`} />
                    </div>
                    ))
                    : null
                }
                
            </div> : null
            
        }
        
        <div class="my-2 bg-teal-900 p-4 md:p-8" id="form-quote">
            <h4 class="text-center font-bold text-xl md:text-2xl xl:text-3xl text-gray-200 ">Book your <span class="underline underline-offset-4 uppercase text-white">{`${title + " " + type}`}</span>{` Today!`}</h4>
            <ContactsForm textColor="text-white" innerTextColor="text-gray-300" />
        </div>

</Layout>




<script async src="https://www.youtube.com/iframe_api"></script>
<script>
    let videos;
    class AstroGreet extends HTMLElement {
        constructor() {
            super();
        
            videos = this.dataset.message.split(",");

        }

    }
    customElements.define('astro-greet', AstroGreet);
    
    
    window.onYouTubeIframeAPIReady = function () {

        if (videos && videos.length) {
            let player;
            videos.map((item, index) => (
            
            player = new window.YT.Player(`muteYouTubeVideoPlayer${index}`, {
                videoId: item, // YouTube Video ID
                width: "100%",               // Player width (in px)
                height: "100%",          // Player height (in px)
                playerVars: {
                    autoplay: 1,        // Auto-play the video on load
                    controls: 1,
                    mute: 1,
                    enablejsapi: 1,       // Show pause/play buttons in player
                    showinfo: 0,        // Hide the video title
                    modestbranding: 1,  // Hide the Youtube Logo
                    loop: 1,            // Run the video in a loop
                    fs: 1,              // Hide the full screen button
                    cc_load_policy: 1, // Hide closed captions
                    iv_load_policy: 3,  // Hide the Video Annotations
                    autohide: 1,         // Hide video controls when playing
                    rel: 0
                }
            })
            
            
            ))
            
        }
        
    }

    // Written by @labnol 
</script>